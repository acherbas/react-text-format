{"version":3,"sources":["components/Accordion.jsx","config/index.js","components/inputFormat.jsx","components/Link.jsx","components/Email.jsx","components/Phone.jsx","components/Image.jsx","components/CreditCard.jsx","components/Term.jsx","App.js","components/Basic.jsx","serviceWorker.js","index.js"],"names":["Accordion","_ref","title","input","output","react_default","a","createElement","Row","className","Col","Card","CardHeader","CardBody","content","inputFormat","decoratorDemo","prefix","suffix","react","decorator","decoratedHref","decoratedText","linkTarget","key","href","target","rel","concat","decoratedURL","src","height","alt","examples","description","components_inputFormat","index_es","ReactHtmlParser","allowedFormats","linkDecorator","phoneDecorator","imageDecorator","creditCardDecorator","termDecorator","terms","App","Container","map","components_Accordion","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAqBeA,MAlBf,SAAAC,GAA6C,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,MAAOC,EAAUH,EAAVG,OACjC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,QACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYH,UAAU,oBAAoBP,GAC1CG,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACG,EAAA,EAAD,KAAMP,KACNE,EAAAC,EAAAC,cAACG,EAAA,EAAD,KAAMN,kCCZPU,EAAO,qnBCeLC,MAbf,SAAAd,GAAiE,IAA1Ce,EAA0Cf,EAA1Ce,cAAeC,EAA2BhB,EAA3BgB,OAAQH,EAAmBb,EAAnBa,QAASI,EAAUjB,EAAViB,OACrD,OACEb,EAAAC,EAAAC,cAACY,EAAA,SAAD,KACGH,GAAiBX,EAAAC,EAAAC,cAAA,QAAME,UAAU,aAAaO,GAC/CX,EAAAC,EAAAC,cAAA,QAAME,UAAU,YACbQ,EACAH,EACAI,KCEHE,EAAY,SAACC,EAAeC,EAAeC,EAAYC,GAC3D,OACEnB,EAAAC,EAAAC,cAAA,KACEkB,KAAMJ,EACNG,IAAKA,EACLE,OAAQH,EACRI,IAAI,WACJlB,UAAU,cAETa,ICTDF,EAAY,SAACC,EAAeC,EAAeE,GAC/C,OACEnB,EAAAC,EAAAC,cAAA,KAAGkB,KAAMJ,EAAeG,IAAKA,EAAKf,UAAU,eACzCa,ICHDF,EAAY,SAACE,EAAeE,GAChC,OACEnB,EAAAC,EAAAC,cAAA,KAAGkB,KAAI,OAAAG,OAASN,GAAiBE,IAAKA,EAAKf,UAAU,eAClDa,ICHDF,EAAY,SAACS,EAAcL,GAC/B,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEuB,IAAKD,EACLL,IAAKA,EACLG,IAAI,WACJI,OAAO,QACPtB,UAAU,cACVuB,IAAKH,MCTPT,EAAY,SAACE,EAAeE,GAC9B,OACEnB,EAAAC,EAAAC,cAAA,KAAGiB,IAAKA,EAAKf,UAAU,oBACrBJ,EAAAC,EAAAC,cAAA,SAAIe,KCKNF,EAAY,SAACE,EAAeE,GAChC,OACEnB,EAAAC,EAAAC,cAAA,QAAMiB,IAAKA,EAAKf,UAAU,WACvBa,ICVDW,EAAW,CCgBK,CAAE/B,MAtBV,uBAsBiBgC,YArBX,+BAqBwB/B,MAjB9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACElB,OANM,oBAONH,QAASA,EACTI,OAPM,wBAmBuCd,OARpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,SAAmBC,IAAgBvB,OPoCnB,CAAEZ,MArDV,cAqDiBgC,YApDX,iCAoDwB/B,MApB9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,cAjBa,2TAkBbC,OAnCM,uEAoCNH,QAASA,EACTI,OApCM,wBAkDuCd,OAVpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiBE,eAAgB,CAAC,OAAQC,cAAenB,GACtDiB,IAAgBvB,OEJH,CAAEZ,MA3CV,eA2CiBgC,YA1CX,iCA0CwB/B,MApB9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,cAba,yLAcbC,OAzBM,0EA0BNH,QAASA,EACTI,OA1BM,wBAwCuCd,OAVpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiBE,eAAgB,CAAC,SAAUE,eAAgBpB,GACzDiB,IAAgBvB,ODIH,CAAEZ,MAzCV,eAyCiBgC,YAxCX,iCAwCwB/B,MApB9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,cAXa,oLAYbC,OAvBM,0EAwBNH,QAASA,EACTI,OAxBM,wBAsCuCd,OAVpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiBE,eAAgB,CAAC,SAAUE,eAAgBpB,GACzDiB,IAAgBvB,OEqBH,CAAEZ,MAxDV,eAwDiBgC,YAvDX,iCAuDwB/B,MArB9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,cAlBa,yQAmBbC,OArCM,0EAsCNH,QAASA,EACTI,OAtCM,wBAqDuCd,OAVpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiBE,eAAgB,CAAC,SAAUG,eAAgBrB,GACzDiB,IAAgBvB,OCTH,CAAEZ,MAzCV,4BAyCiBgC,YAxCX,iCAwCwB/B,MApB9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,cAXa,sKAYbC,OAvBM,oFAwBNH,QAASA,EACTI,OAxBM,wBAsCuCd,OAVpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiBE,eAAgB,CAAC,cAAeI,oBAAqBtB,GACnEiB,IAAgBvB,OCuBH,CAAEZ,MA1DV,cA0DiBgC,YAzDX,iCAyDwB/B,MA5B9B,WACZ,OACEE,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,cAZa,oJAabC,OAhCM,2KAiCNH,QAASA,EACTI,OAzBM,wBA+CuCd,OAlBpC,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiBE,eAAgB,CAAC,QAASK,cAAevB,EAAWwB,MAAO,CAC1E,OACA,QACA,QACA,SACA,QACA,UACA,WAECP,IAAgBvB,QC7CJ+B,mLAEjB,OACExC,EAAAC,EAAAC,cAACY,EAAA,SAAD,KACEd,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACEzC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,+BACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SACZJ,EAAAC,EAAAC,cAAA,KACEkB,KAAK,kDACLC,OAAO,SACPjB,UAAU,gBACVkB,IAAI,uBAJN,sBASFtB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iCAAd,gIAMJJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,0BACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,KACEkB,KAAK,kDACLC,OAAO,SACPC,IAAI,sBACJlB,UAAU,QAEVJ,EAAAC,EAAAC,cAAA,OACEuB,IAAI,sGACJE,IAAI,sGACJD,OAAO,QAGX1B,EAAAC,EAAAC,cAAA,KACEkB,KAAK,mDACLC,OAAO,SACPC,IAAI,uBAEJtB,EAAAC,EAAAC,cAAA,OACEuB,IAAI,sGACJE,IAAI,OACJD,OAAO,UAMdE,EAASc,IAAI,SAAA9C,GAAA,IAAGC,EAAHD,EAAGC,MAAOgC,EAAVjC,EAAUiC,YAAa/B,EAAvBF,EAAuBE,MAAOC,EAA9BH,EAA8BG,OAA9B,OACZC,EAAAC,EAAAC,cAACyC,EAAD,CACE9C,MAAOA,EACPgC,YAAaA,EACb/B,MAAOA,EACPC,OAAQA,eAxDW6C,aEDbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0332e719.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col, Card, CardHeader, CardBody } from \"reactstrap\";\n\nfunction Accordion({ title, input, output }) {\n  return (\n    <Row className=\"mb-2\">\n      <Col>\n        <Card>\n          <CardHeader className=\"accordion-header\">{title}</CardHeader>\n          <CardBody>\n            <Row>\n              <Col>{input()}</Col>\n              <Col>{output()}</Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Accordion;\n","export const content = `\n  This is demo link http://www.google.com\n  This is encoded Link http://go%2Emsn%2Ecom/nl/133942%2Easp\n  This is demo email <span data-email=\"email@span.com\">jago@yahoo.com</span>\n  This is demo\n  https://preview.ibb.co/hqhoyA/lexie-barnhorn-1114350-unsplash.jpg<l/i>\n  This is demo credit Card 5555555555554444\n  This is demo phone Number 123.456.7890\n  This is demo phone Number (212) 555 1212\n  This is demo Phone Number (212) 555-1212 \n  This is demo phone Number 212-555-1212 ext. 101\n  This is demo phone Number 212 555 1212 x101\n  This is an anchor <a href=\"http://formatter.com\">http://formatter.com</a>\n`;\n","import React, { Fragment } from \"react\";\n\nfunction inputFormat({ decoratorDemo, prefix, content, suffix }) {\n  return (\n    <Fragment>\n      {decoratorDemo && <code className=\"decorator\">{decoratorDemo}</code>}\n      <code className=\"htmlCode\">\n        {prefix}\n        {content}\n        {suffix}\n      </code>\n    </Fragment>\n  );\n}\n\nexport default inputFormat;\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Link Parser\";\nconst description = \"This is advance implmentation.\";\nconst prefix = `<ReactTextFormat allowedFormats={[\"URL\"]} linkDecorator={decorator}>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst decorator = (decoratedHref, decoratedText, linkTarget, key) => {\n  return (\n    <a\n      href={decoratedHref}\n      key={key}\n      target={linkTarget}\n      rel=\"noopener\"\n      className=\"customLink\"\n    >\n      {decoratedText}\n    </a>\n  );\n};\n\nconst decoratorDemo = `const decorator = (decoratedHref, decoratedText, linkTarget, key) => {\n      return (\n        <a\n          href={decoratedHref}\n          key={key}\n          target={linkTarget}\n          rel=\"noopener\"\n          className=\"customLink\"\n        >\n          {decoratedText}\n        </a>\n      );\n    };`;\n\nconst input = () => {\n  return (\n    <InputFormat\n      decoratorDemo={decoratorDemo}\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat allowedFormats={[\"URL\"]} linkDecorator={decorator}>\n        {ReactHtmlParser(content)}\n      </ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Email Parser\";\nconst description = \"This is advance implmentation.\";\nconst prefix = `<ReactTextFormat allowedFormats={[\"Email\"]} emailDecorator={decorator}>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst decorator = (decoratedHref, decoratedText, key) => {\n  return (\n    <a href={decoratedHref} key={key} className=\"customEmail\">\n      {decoratedText}\n    </a>\n  );\n};\n\nconst decoratorDemo = `const decorator = (decoratedHref, decoratedText, key) => {\n  return (\n    <a href={decoratedHref} key={key} className=\"customEmail\">\n      {decoratedText}\n    </a>\n  );\n};`;\n\nconst input = () => {\n  return (\n    <InputFormat\n      decoratorDemo={decoratorDemo}\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat allowedFormats={[\"Email\"]} phoneDecorator={decorator}>\n        {ReactHtmlParser(content)}\n      </ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Phone Parser\";\nconst description = \"This is advance implmentation.\";\nconst prefix = `<ReactTextFormat allowedFormats={[\"Phone\"]} phoneDecorator={decorator}>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst decorator = (decoratedText, key) => {\n  return (\n    <a href={`tel:${decoratedText}`} key={key} className=\"customPhone\">\n      {decoratedText}\n    </a>\n  );\n};\n\nconst decoratorDemo = `const decorator = (decoratedText, key) => {\n    return (\n      <a href={\\`tel:\\${decoratedText}\\`} key={key} className=\"customPhone\">\n        {decoratedText}\n      </a>\n    );\n  }`;\n\n\n\nconst input = () => {\n  return (\n    <InputFormat\n      decoratorDemo={decoratorDemo}\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat allowedFormats={[\"Phone\"]} phoneDecorator={decorator}>\n        {ReactHtmlParser(content)}\n      </ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Image Parser\";\nconst description = \"This is advance implmentation.\";\nconst prefix = `<ReactTextFormat allowedFormats={[\"Image\"]} imageDecorator={decorator}>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst decorator = (decoratedURL, key) => {\n  return (\n    <div>\n      <img\n        src={decoratedURL}\n        key={key}\n        rel=\"noopener\"\n        height=\"100px\"\n        className=\"customImage\"\n        alt={decoratedURL}\n      />\n    </div>\n  );\n};\n\nconst decoratorDemo = `const decorator = (decoratedURL, key) => {\n  return (\n    <div>\n      <img\n        src={decoratedURL}\n        key={key}\n        rel=\"noopener\"\n        width=\"100\"\n        className=\"customImage\"\n        alt={decoratedURL}\n      />\n    </div>\n  );\n};`;\n\nconst input = () => {\n  return (\n    <InputFormat\n      decoratorDemo={decoratorDemo}\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\n\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat allowedFormats={[\"Image\"]} imageDecorator={decorator}>\n        {ReactHtmlParser(content)}\n      </ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Credit Card Number Parser\";\nconst description = \"This is advance implmentation.\";\nconst prefix = `<ReactTextFormat allowedFormats={[\"CreditCard\"]} creditCardDecorator={decorator}>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst decorator = (decoratedText, key) => {\n    return (\n      <i key={key} className=\"customCreditCard\">\n        <b>{decoratedText}</b>\n      </i>\n    );\n};\n\nconst decoratorDemo = `const decorator = (decoratedText, key) => {\n    return (\n      <i key={key} className=\"customCreditCard\">\n        <b>{decoratedText}</b>\n      </i>\n    );\n};`;\n\nconst input = () => {\n  return (\n    <InputFormat\n      decoratorDemo={decoratorDemo}\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat allowedFormats={[\"CreditCard\"]} creditCardDecorator={decorator}>\n        {ReactHtmlParser(content)}\n      </ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Term Parser\";\nconst description = \"This is advance implmentation.\";\nconst prefix = `<ReactTextFormat allowedFormats={[\"Term\"]} termDecorator={decorator} terms={[\n  \"Link\",\n  \"phone\",\n  \"image\",\n  \"Anchor\",\n  \"email\",\n  \"contact\",\n  \"Credit\"\n]}>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst decorator = (decoratedText, key) => {\n  return (\n    <mark key={key} className=\"keyword\">\n      {decoratedText}\n    </mark>\n  );\n};\n\nconst decoratorDemo = `const decorator = (decoratedText, key) => {\n  return (\n    <mark key={key} className=\"keyword\">\n      {decoratedText}\n    </mark>\n  );\n};\n`;\n\nconst input = () => {\n  return (\n    <InputFormat\n      decoratorDemo={decoratorDemo}\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat allowedFormats={[\"Term\"]} termDecorator={decorator} terms={[\n        \"Link\",\n        \"phone\",\n        \"image\",\n        \"Anchor\",\n        \"email\",\n        \"contact\",\n        \"Credit\"\n      ]}>\n        {ReactHtmlParser(content)}\n      </ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","import React, { Component, Fragment } from \"react\";\nimport \"./App.css\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport Accordion from \"./components/Accordion\";\nimport { config as basic } from \"./components/Basic\";\nimport { config as link } from \"./components/Link\";\nimport { config as email } from \"./components/Email\";\nimport { config as phone } from \"./components/Phone\";\nimport { config as image } from \"./components/Image\";\nimport { config as creditcard } from \"./components/CreditCard\";\nimport { config as term } from \"./components/Term\";\n\nconst examples = [basic, link, phone, email, image, creditcard, term];\nexport default class App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Container>\n          <Row className=\"text-light text-center mt-5\">\n            <Col>\n              <h1 className=\"w-100\">\n                <a\n                  href=\"https://www.npmjs.com/package/react-text-format\"\n                  target=\"_blank\"\n                  className=\"package-title\"\n                  rel=\"noopener noreferrer\"\n                >\n                  React Text Format\n                </a>\n              </h1>\n              <h4 className=\"font-italic font-weight-light\">\n                React Component to find and parse links, emails, phone numbers,\n                image's URL, credit cards and keywords to required format.\n              </h4>\n            </Col>\n          </Row>\n          <Row className=\"text-light text-center\">\n            <Col>\n              <a\n                href=\"https://www.npmjs.com/package/react-text-format\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"mr-4\"\n              >\n                <img\n                  src=\"https://user-images.githubusercontent.com/1968160/57470661-cd87ac80-72a2-11e9-9ef0-b5f209b574d2.png\"\n                  alt=\"https://user-images.githubusercontent.com/1968160/57470661-cd87ac80-72a2-11e9-9ef0-b5f209b574d2.png\"\n                  height=\"50\"\n                />\n              </a>\n              <a\n                href=\"https://yarnpkg.com/en/package/react-text-format\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  src=\"https://user-images.githubusercontent.com/1968160/57470662-cd87ac80-72a2-11e9-8ba4-2ee4ca1b0028.png\"\n                  alt=\"Yarn\"\n                  height=\"50\"\n                />\n              </a>\n            </Col>\n          </Row>\n\n          {examples.map(({ title, description, input, output }) => (\n            <Accordion\n              title={title}\n              description={description}\n              input={input}\n              output={output}\n            />\n          ))}\n        </Container>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport ReactTextFormat from \"react-text-format\";\nimport { content } from \"../config\";\nimport InputFormat from \"./inputFormat\";\n\nconst title = \"Basic Implementation\";\nconst description = \"This is basic implmentation.\";\nconst prefix = `<ReactTextFormat>`;\nconst suffix = `</ReactTextFormat>`;\n\nconst input = () => {\n  return (\n    <InputFormat\n      prefix={prefix}\n      content={content}\n      suffix={suffix}\n    />\n  );\n};\nconst output = () => {\n  return (\n    <div className=\"output\">\n      <ReactTextFormat> {ReactHtmlParser(content)}</ReactTextFormat>\n    </div>\n  );\n};\n\nexport const config = { title, description, input, output };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}