{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","customLinkDecorator","decoratedHref","decoratedText","linkTarget","key","react_default","a","createElement","href","target","rel","className","customImageDecorator","decoratedURL","src","width","alt","customEmailDecorator","customPhoneDecorator","concat","customCreditCardDecorator","customTermDecorator","getContent","data-email","index_es","this","allowedFormats","linkDecorator","emailDecorator","phoneDecorator","creditCardDecorator","imageDecorator","terms","termDecorator","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAIqBA,6MACnBC,oBAAsB,SACpBC,EACAC,EACAC,EACAC,GAEA,OACEC,EAAAC,EAAAC,cAAA,KACEC,KAAMP,EACNG,IAAKA,EACLK,OAAQN,EACRO,IAAI,WACJC,UAAU,cAETT,MAKPU,qBAAuB,SAACC,EAAsBT,GAC5C,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEO,IAAKD,EACLT,IAAKA,EACLM,IAAI,WACJK,MAAM,MACNJ,UAAU,cACVK,IAAKH,QAMbI,qBAAuB,SACrBhB,EACAC,EACAE,GAEA,OACEC,EAAAC,EAAAC,cAAA,KAAGC,KAAMP,EAAeG,IAAKA,EAAKO,UAAU,eACzCT,MAKPgB,qBAAuB,SAAChB,EAAuBE,GAC7C,OACEC,EAAAC,EAAAC,cAAA,KAAGC,KAAI,OAAAW,OAASjB,GAAiBE,IAAKA,EAAKO,UAAU,eAClDT,MAKPkB,0BAA4B,SAC1BlB,EACAE,GAEA,OACEC,EAAAC,EAAAC,cAAA,KAAGH,IAAKA,EAAKO,UAAU,oBACrBN,EAAAC,EAAAC,cAAA,SAAIL,OAKVmB,oBAAsB,SAACnB,EAAuBE,GAC5C,OACEC,EAAAC,EAAAC,cAAA,KAAGH,IAAKA,EAAKO,UAAU,WACpBT,MAKPoB,WAAa,kBACXjB,EAAAC,EAAAC,cAAA,qDAEEF,EAAAC,EAAAC,cAAA,WAFF,6DAIEF,EAAAC,EAAAC,cAAA,WAJF,sBAKqBF,EAAAC,EAAAC,cAAA,QAAMgB,aAAW,kBAAjB,kBACnBlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAPF,uFAUEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAXF,4CAaEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAdF,0CAeyCF,EAAAC,EAAAC,cAAA,WAfzC,4CAgB2CF,EAAAC,EAAAC,cAAA,WAhB3C,4CAiB2CF,EAAAC,EAAAC,cAAA,WAjB3C,mDAkBkDF,EAAAC,EAAAC,cAAA,WAlBlD,+CAmB8CF,EAAAC,EAAAC,cAAA,WAC5CF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WArBF,qBAsBoBF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,wBAAR,wBAtBpB,8EA2BA,OACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAAkBC,KAAKH,eAEzBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEE,eAAgB,CACd,MACA,QACA,QACA,QACA,aACA,QAEFC,cAAeF,KAAKzB,oBACpB4B,eAAgBH,KAAKR,qBACrBY,eAAgBJ,KAAKP,qBACrBY,oBAAqBL,KAAKL,0BAC1BW,eAAgBN,KAAKb,qBACrBoB,MAAO,CAAC,OAAQ,QAAS,QAAS,SAAU,QAAS,UAAW,UAChEC,cAAeR,KAAKJ,qBAEnBI,KAAKH,uBA/HeY,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a26b3935.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport ReactTextFormat from \"react-text-format\";\n\nexport default class App extends Component {\n  customLinkDecorator = (\n    decoratedHref: string,\n    decoratedText: string,\n    linkTarget: string,\n    key: number\n  ): React.Node => {\n    return (\n      <a\n        href={decoratedHref}\n        key={key}\n        target={linkTarget}\n        rel=\"noopener\"\n        className=\"customLink\"\n      >\n        {decoratedText}\n      </a>\n    );\n  };\n\n  customImageDecorator = (decoratedURL: string, key: number): React.Node => {\n    return (\n      <div>\n        <img\n          src={decoratedURL}\n          key={key}\n          rel=\"noopener\"\n          width=\"100\"\n          className=\"customImage\"\n          alt={decoratedURL}\n        />\n      </div>\n    );\n  };\n\n  customEmailDecorator = (\n    decoratedHref: string,\n    decoratedText: string,\n    key: number\n  ): React.Node => {\n    return (\n      <a href={decoratedHref} key={key} className=\"customEmail\">\n        {decoratedText}\n      </a>\n    );\n  };\n\n  customPhoneDecorator = (decoratedText: string, key: number): React.Node => {\n    return (\n      <a href={`tel:${decoratedText}`} key={key} className=\"customPhone\">\n        {decoratedText}\n      </a>\n    );\n  };\n\n  customCreditCardDecorator = (\n    decoratedText: string,\n    key: number\n  ): React.Node => {\n    return (\n      <i key={key} className=\"customCreditCard\">\n        <b>{decoratedText}</b>\n      </i>\n    );\n  };\n\n  customTermDecorator = (decoratedText: string, key: number): React.Node => {\n    return (\n      <b key={key} className=\"keyword\">\n        {decoratedText}\n      </b>\n    );\n  };\n\n  getContent = (): React.Node => (\n    <div>\n      This is demo link http://www.google.com\n      <br />\n      This is encoded Link http://go%2Emsn%2Ecom/nl/133942%2Easp\n      <br />\n      This is demo email <span data-email=\"email@span.com\">jago@yahoo.com</span>\n      <br />\n      <br />\n      This is demo image\n      https://preview.ibb.co/hqhoyA/lexie-barnhorn-1114350-unsplash.jpg\n      <br />\n      <br />\n      This is demo credit Card 5555555555554444\n      <br />\n      <br />\n      This is demo phone Number 123.456.7890 <br />\n      This is demo phone Number (212) 555 1212 <br />\n      This is demo Phone Number (212) 555-1212 <br />\n      This is demo phone Number 212-555-1212 ext. 101 <br />\n      This is demo phone Number 212 555 1212 x101 <br />\n      <br />\n      <br />\n      This is an anchor <a href=\"http://formatter.com\">http://formatter.com</a>;\n    </div>\n  );\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h3>Basic Implementation</h3>\n          <ReactTextFormat>{this.getContent()}</ReactTextFormat>\n        </div>\n        <div>\n          <h3>Advance Implementation</h3>\n          <ReactTextFormat\n            allowedFormats={[\n              \"URL\",\n              \"Email\",\n              \"Image\",\n              \"Phone\",\n              \"CreditCard\",\n              \"Term\"\n            ]}\n            linkDecorator={this.customLinkDecorator}\n            emailDecorator={this.customEmailDecorator}\n            phoneDecorator={this.customPhoneDecorator}\n            creditCardDecorator={this.customCreditCardDecorator}\n            imageDecorator={this.customImageDecorator}\n            terms={[\"Link\", \"phone\", \"image\", \"Anchor\", \"email\", \"contact\", \"Credit\"]}\n            termDecorator={this.customTermDecorator}\n          >\n            {this.getContent()}\n          </ReactTextFormat>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}